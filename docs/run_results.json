{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.0", "generated_at": "2023-11-03T00:39:12.003595Z", "invocation_id": "dfa7a1c6-9d30-4eaa-a464-55f1a3286e24", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:03.788351Z", "completed_at": "2023-11-03T00:39:04.526935Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:04.527487Z", "completed_at": "2023-11-03T00:39:04.527498Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8459692001342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization_tmp", "compiled": true, "compiled_code": "select \"id\",\n  \"_fivetran_synced\",\n  \"created_at\",\n  \"details\",\n  \"external_id\",\n  \"group_id\",\n  \"name\",\n  \"notes\",\n  \"shared_comments\",\n  \"shared_tickets\",\n  \"updated_at\",\n  \"url\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"organization_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:03.776592Z", "completed_at": "2023-11-03T00:39:04.533869Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:04.534872Z", "completed_at": "2023-11-03T00:39:04.534878Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8556919097900391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__domain_name_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\nselect \"index\",\n  \"organization_id\",\n  \"_fivetran_synced\",\n  \"domain_name\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"domain_name_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__domain_name_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:03.800933Z", "completed_at": "2023-11-03T00:39:04.534609Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:04.535997Z", "completed_at": "2023-11-03T00:39:04.536002Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8551030158996582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule_holiday_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"id\",\n  \"schedule_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"end_date\",\n  \"name\",\n  \"start_date\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"schedule_holiday_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule_holiday_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:03.759216Z", "completed_at": "2023-11-03T00:39:04.544363Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:04.544890Z", "completed_at": "2023-11-03T00:39:04.544897Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.871589183807373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__daylight_time_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"time_zone\",\n  \"year\",\n  \"_fivetran_synced\",\n  \"daylight_end_utc\",\n  \"daylight_offset\",\n  \"daylight_start_utc\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"daylight_time_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__daylight_time_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:04.615803Z", "completed_at": "2023-11-03T00:39:05.326368Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:05.327840Z", "completed_at": "2023-11-03T00:39:05.327858Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.789870023727417, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment_tmp", "compiled": true, "compiled_code": "select \"id\",\n  \"_fivetran_synced\",\n  \"body\",\n  \"created\",\n  \"facebook_comment\",\n  \"public\",\n  \"ticket_id\",\n  \"tweet\",\n  \"user_id\",\n  \"voice_comment\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"ticket_comment_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_comment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:04.629278Z", "completed_at": "2023-11-03T00:39:05.365582Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:05.366671Z", "completed_at": "2023-11-03T00:39:05.366681Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8168799877166748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nselect \"id\",\n  \"updated_at\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"active\",\n  \"created_at\",\n  \"display_name\",\n  \"end_user_visible\",\n  \"name\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"ticket_form_history_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_form_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:04.620726Z", "completed_at": "2023-11-03T00:39:05.363408Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:05.364984Z", "completed_at": "2023-11-03T00:39:05.365000Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8326296806335449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history_tmp", "compiled": true, "compiled_code": "select \"field_name\",\n  \"ticket_id\",\n  \"updated\",\n  \"_fivetran_synced\",\n  \"user_id\",\n  \"value\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"ticket_field_history_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_field_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:04.604848Z", "completed_at": "2023-11-03T00:39:05.381330Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:05.382177Z", "completed_at": "2023-11-03T00:39:05.382187Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8607668876647949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"end_time\",\n  \"id\",\n  \"start_time\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"end_time_utc\",\n  \"name\",\n  \"start_time_utc\",\n  \"time_zone\",\n  \"created_at\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"schedule_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:05.408200Z", "completed_at": "2023-11-03T00:39:06.117863Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.121323Z", "completed_at": "2023-11-03T00:39:06.121345Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7952780723571777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_schedule_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\n\n\nselect \"created_at\",\n  \"ticket_id\",\n  \"_fivetran_synced\",\n  \"schedule_id\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"ticket_schedule_data\"\n\n", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_schedule_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.208270Z", "completed_at": "2023-11-03T00:39:06.212780Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.214959Z", "completed_at": "2023-11-03T00:39:06.214972Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01102900505065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.brand_data_postgres", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.220821Z", "completed_at": "2023-11-03T00:39:06.223331Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.228151Z", "completed_at": "2023-11-03T00:39:06.228160Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010488033294677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.daylight_time_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.232858Z", "completed_at": "2023-11-03T00:39:06.234079Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.234778Z", "completed_at": "2023-11-03T00:39:06.234784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004057884216308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.domain_name_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.236509Z", "completed_at": "2023-11-03T00:39:06.237413Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.238592Z", "completed_at": "2023-11-03T00:39:06.238596Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003226757049560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.group_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.240386Z", "completed_at": "2023-11-03T00:39:06.241499Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.242126Z", "completed_at": "2023-11-03T00:39:06.242131Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0030112266540527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.organization_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.243736Z", "completed_at": "2023-11-03T00:39:06.244753Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.247982Z", "completed_at": "2023-11-03T00:39:06.247988Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005389213562011719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.organization_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.251078Z", "completed_at": "2023-11-03T00:39:06.252181Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.253133Z", "completed_at": "2023-11-03T00:39:06.253137Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0038471221923828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.schedule_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.254897Z", "completed_at": "2023-11-03T00:39:06.255964Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.256503Z", "completed_at": "2023-11-03T00:39:06.256508Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002585887908935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.schedule_holiday_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.258241Z", "completed_at": "2023-11-03T00:39:06.259253Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.259811Z", "completed_at": "2023-11-03T00:39:06.259815Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0026941299438476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.ticket_comment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.261613Z", "completed_at": "2023-11-03T00:39:06.263371Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.263944Z", "completed_at": "2023-11-03T00:39:06.263948Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003537893295288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.ticket_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.265632Z", "completed_at": "2023-11-03T00:39:06.266651Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.267130Z", "completed_at": "2023-11-03T00:39:06.267134Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0025207996368408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.ticket_field_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.268608Z", "completed_at": "2023-11-03T00:39:06.269545Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.269961Z", "completed_at": "2023-11-03T00:39:06.269965Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0022470951080322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.ticket_form_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.271748Z", "completed_at": "2023-11-03T00:39:06.272737Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.273235Z", "completed_at": "2023-11-03T00:39:06.273239Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0027081966400146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.ticket_schedule_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.274918Z", "completed_at": "2023-11-03T00:39:06.275902Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.276380Z", "completed_at": "2023-11-03T00:39:06.276384Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0025098323822021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.ticket_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.277993Z", "completed_at": "2023-11-03T00:39:06.278951Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.279397Z", "completed_at": "2023-11-03T00:39:06.279400Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002429962158203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.time_zone_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.280937Z", "completed_at": "2023-11-03T00:39:06.282662Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.283190Z", "completed_at": "2023-11-03T00:39:06.283195Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003244161605834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.user_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.285024Z", "completed_at": "2023-11-03T00:39:06.286114Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.286615Z", "completed_at": "2023-11-03T00:39:06.286619Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0028259754180908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zendesk_source_integration_tests.user_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:05.450682Z", "completed_at": "2023-11-03T00:39:06.228473Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.230477Z", "completed_at": "2023-11-03T00:39:06.230483Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8580770492553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag_tmp", "compiled": true, "compiled_code": "select \"tag\",\n  \"ticket_id\",\n  \"_fivetran_synced\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"ticket_tag_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:05.466491Z", "completed_at": "2023-11-03T00:39:06.229787Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.231874Z", "completed_at": "2023-11-03T00:39:06.231882Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8505127429962158, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__time_zone_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"time_zone\",\n  \"_fivetran_synced\",\n  \"standard_offset\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"time_zone_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__time_zone_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:05.455675Z", "completed_at": "2023-11-03T00:39:06.249430Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:06.250785Z", "completed_at": "2023-11-03T00:39:06.250790Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8845126628875732, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tmp", "compiled": true, "compiled_code": "select \"id\",\n  \"_fivetran_synced\",\n  \"allow_channelback\",\n  \"assignee_id\",\n  \"brand_id\",\n  \"created_at\",\n  \"description\",\n  \"due_at\",\n  \"external_id\",\n  \"forum_topic_id\",\n  \"group_id\",\n  \"has_incidents\",\n  \"is_public\",\n  \"organization_id\",\n  \"priority\",\n  \"problem_id\",\n  \"recipient\",\n  \"requester_id\",\n  \"status\",\n  \"subject\",\n  \"submitter_id\",\n  \"system_client\",\n  \"ticket_form_id\",\n  \"type\",\n  \"updated_at\",\n  \"url\",\n  \"via_channel\",\n  \"via_source_from_id\",\n  \"via_source_from_title\",\n  \"via_source_rel\",\n  \"via_source_to_address\",\n  \"via_source_to_name\",\n  \"merged_ticket_ids\",\n  \"via_source_from_address\",\n  \"followup_ids\",\n  \"via_followup_source_id\"\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"ticket_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.309471Z", "completed_at": "2023-11-03T00:39:07.247656Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:07.254896Z", "completed_at": "2023-11-03T00:39:07.254905Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3505260944366455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__domain_name", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__domain_name_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    domain_name\n    \n as \n    \n    domain_name\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        domain_name,\n        index\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__domain_name\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.288502Z", "completed_at": "2023-11-03T00:39:07.246090Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:07.252490Z", "completed_at": "2023-11-03T00:39:07.252700Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.372304916381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    details\n    \n as \n    \n    details\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    shared_comments\n    \n as \n    \n    shared_comments\n    \n, \n    \n    \n    shared_tickets\n    \n as \n    \n    shared_tickets\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        created_at,\n        updated_at,\n        details,\n        name,\n        external_id\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.335773Z", "completed_at": "2023-11-03T00:39:07.249884Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:07.257776Z", "completed_at": "2023-11-03T00:39:07.257794Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3259990215301514, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__daylight_time", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__daylight_time_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    daylight_end_utc\n    \n as \n    \n    daylight_end_utc\n    \n, \n    \n    \n    daylight_offset\n    \n as \n    \n    daylight_offset\n    \n, \n    \n    \n    daylight_start_utc\n    \n as \n    \n    daylight_start_utc\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    year\n    \n as \n    \n    year\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        daylight_end_utc,\n        daylight_offset,\n        daylight_start_utc,\n        time_zone,\n        year,\n        daylight_offset * 60 as daylight_offset_minutes\n        \n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__daylight_time\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:06.318434Z", "completed_at": "2023-11-03T00:39:07.657284Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:07.664264Z", "completed_at": "2023-11-03T00:39:07.664271Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4386951923370361, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule_holiday", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule_holiday_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    schedule_id\n    \n as \n    \n    schedule_id\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_deleted,\n        cast(_fivetran_synced as timestamp ) as _fivetran_synced,\n        cast(end_date as timestamp ) as holiday_end_date_at,\n        cast(id as TEXT ) as holiday_id,\n        name as holiday_name,\n        cast(schedule_id as TEXT ) as schedule_id,\n        cast(start_date as timestamp ) as holiday_start_date_at\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule_holiday\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:07.679603Z", "completed_at": "2023-11-03T00:39:08.440828Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:08.442145Z", "completed_at": "2023-11-03T00:39:08.442179Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8503668308258057, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_form_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    end_user_visible\n    \n as \n    \n    end_user_visible\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_form_id,\n        created_at,\n            updated_at,\n        \n        display_name,\n        active as is_active,\n        name\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_form_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:07.685813Z", "completed_at": "2023-11-03T00:39:08.441202Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:08.442545Z", "completed_at": "2023-11-03T00:39:08.442549Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8539130687713623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_field_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_name\n    \n as \n    \n    field_name\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        field_name,\n        updated as valid_starting_at,\n            lead(updated) over (partition by ticket_id, field_name order by updated) as valid_ending_at,\n        \n        value,\n        user_id\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:07.670361Z", "completed_at": "2023-11-03T00:39:08.495166Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:08.496091Z", "completed_at": "2023-11-03T00:39:08.496099Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.914287805557251, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_comment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    cast(null as integer) as \n    \n    call_duration\n    \n , \n    cast(null as integer) as \n    \n    call_id\n    \n , \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    facebook_comment\n    \n as \n    \n    facebook_comment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as integer) as \n    \n    location\n    \n , \n    \n    \n    public\n    \n as \n    \n    public\n    \n, \n    cast(null as integer) as \n    \n    recording_url\n    \n , \n    cast(null as timestamp) as \n    \n    started_at\n    \n , \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    cast(null as integer) as \n    \n    transcription_status\n    \n , \n    cast(null as integer) as \n    \n    transcription_text\n    \n , \n    cast(null as integer) as \n    \n    trusted\n    \n , \n    \n    \n    tweet\n    \n as \n    \n    tweet\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    voice_comment\n    \n as \n    \n    voice_comment\n    \n, \n    cast(null as integer) as \n    \n    voice_comment_transcription_visible\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_comment_id,\n        _fivetran_synced,\n        body,\n        created as created_at,\n        \n        public as is_public,\n        ticket_id,\n        user_id,\n        facebook_comment as is_facebook_comment,\n        tweet as is_tweet,\n        voice_comment as is_voice_comment\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_comment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:07.759111Z", "completed_at": "2023-11-03T00:39:08.540945Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:08.547028Z", "completed_at": "2023-11-03T00:39:08.547035Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8704960346221924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    end_time_utc\n    \n as \n    \n    end_time_utc\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    start_time_utc\n    \n as \n    \n    start_time_utc\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as schedule_id, --need to convert from numeric to string for downstream models to work properly\n        end_time,\n        start_time,\n        name as schedule_name,\n        created_at,\n        time_zone\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:08.541438Z", "completed_at": "2023-11-03T00:39:09.273346Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:09.275124Z", "completed_at": "2023-11-03T00:39:09.275129Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.815742015838623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__brand_tmp", "compiled": true, "compiled_code": "select /* no columns returned from star() macro */\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"brand_data_postgres\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__brand_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:08.522780Z", "completed_at": "2023-11-03T00:39:09.272739Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:09.274000Z", "completed_at": "2023-11-03T00:39:09.274015Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8407108783721924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_schedule", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_schedule_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    schedule_id\n    \n as \n    \n    schedule_id\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        created_at,\n        \n        cast(schedule_id as TEXT) as schedule_id --need to convert from numeric to string for downstream models to work properly\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:08.581150Z", "completed_at": "2023-11-03T00:39:09.325242Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:09.326579Z", "completed_at": "2023-11-03T00:39:09.326597Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8281407356262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__group_tmp", "compiled": true, "compiled_code": "select /* no columns returned from star() macro */\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"group_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__group_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:08.630357Z", "completed_at": "2023-11-03T00:39:09.450002Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:09.451064Z", "completed_at": "2023-11-03T00:39:09.451074Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.914017915725708, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization_tag_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n\n\nselect /* no columns returned from star() macro */\nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"organization_tag_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:09.375510Z", "completed_at": "2023-11-03T00:39:10.100922Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.102789Z", "completed_at": "2023-11-03T00:39:10.102809Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8089370727539062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user_tag_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n\n\nselect /* no columns returned from star() macro */  \nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"user_tag_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:09.363172Z", "completed_at": "2023-11-03T00:39:10.105127Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.106721Z", "completed_at": "2023-11-03T00:39:10.106732Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8295297622680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user_tmp", "compiled": true, "compiled_code": "select /* no columns returned from star() macro */   \nfrom \"postgres\".\"zendesk_source_integrations_tests_2\".\"user_data\"", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:09.410300Z", "completed_at": "2023-11-03T00:39:10.122138Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.122894Z", "completed_at": "2023-11-03T00:39:10.122903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7971510887145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    tag\n    \n as \n    \n    tag\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        \n        tag as tags\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.207014Z", "completed_at": "2023-11-03T00:39:10.219076Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.224310Z", "completed_at": "2023-11-03T00:39:10.224324Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.031494140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__domain_name\"\nwhere organization_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.219513Z", "completed_at": "2023-11-03T00:39:10.225814Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.227195Z", "completed_at": "2023-11-03T00:39:10.227199Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015119791030883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization\"\nwhere organization_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.227482Z", "completed_at": "2023-11-03T00:39:10.235115Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.244597Z", "completed_at": "2023-11-03T00:39:10.244605Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01911306381225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__organization_organization_id.152be1ab31", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organization_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization\"\nwhere organization_id is not null\ngroup by organization_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.235686Z", "completed_at": "2023-11-03T00:39:10.245985Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.247403Z", "completed_at": "2023-11-03T00:39:10.247407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017121076583862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year.88227aef3d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        time_zone, year\n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__daylight_time\"\n    group by time_zone, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.247759Z", "completed_at": "2023-11-03T00:39:10.252699Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.256766Z", "completed_at": "2023-11-03T00:39:10.256771Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011010169982910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__schedule_holiday_holiday_id.52eb08f782", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect holiday_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule_holiday\"\nwhere holiday_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.253549Z", "completed_at": "2023-11-03T00:39:10.258150Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.259569Z", "completed_at": "2023-11-03T00:39:10.259572Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011246681213378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__schedule_holiday_holiday_id.0341d5635a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    holiday_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__schedule_holiday\"\nwhere holiday_id is not null\ngroup by holiday_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.259907Z", "completed_at": "2023-11-03T00:39:10.265043Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.270023Z", "completed_at": "2023-11-03T00:39:10.270029Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012095928192138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_form_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_form_history\"\nwhere ticket_form_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.265366Z", "completed_at": "2023-11-03T00:39:10.270991Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.272485Z", "completed_at": "2023-11-03T00:39:10.272489Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00897979736328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_comment_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_comment\"\nwhere ticket_comment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.273665Z", "completed_at": "2023-11-03T00:39:10.278324Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.283800Z", "completed_at": "2023-11-03T00:39:10.283806Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012662649154663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__ticket_comment_ticket_comment_id.ba353330cd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ticket_comment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_comment\"\nwhere ticket_comment_id is not null\ngroup by ticket_comment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:09.544979Z", "completed_at": "2023-11-03T00:39:10.321278Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:10.321891Z", "completed_at": "2023-11-03T00:39:10.321899Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8556349277496338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__time_zone", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__time_zone_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    standard_offset\n    \n as \n    \n    standard_offset\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        standard_offset,\n        time_zone,\n        -- the standard_offset is a string written as [+/-]HH:MM\n        -- let's convert it to an integer value of minutes\n        cast( \n\n  \n    \n\n    split_part(\n        standard_offset,\n        ':',\n        1\n        )\n\n\n  \n\n as integer ) * 60 +\n            (cast( \n\n  \n    \n\n    split_part(\n        standard_offset,\n        ':',\n        2\n        )\n\n\n  \n\n as integer ) *\n                (case when standard_offset like '-%' then -1 else 1 end) ) as standard_offset_minutes\n    \n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__time_zone\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.194741Z", "completed_at": "2023-11-03T00:39:11.019415Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.020554Z", "completed_at": "2023-11-03T00:39:11.020562Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9109890460968018, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_channelback\n    \n as \n    \n    allow_channelback\n    \n, \n    \n    \n    assignee_id\n    \n as \n    \n    assignee_id\n    \n, \n    \n    \n    brand_id\n    \n as \n    \n    brand_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    forum_topic_id\n    \n as \n    \n    forum_topic_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    has_incidents\n    \n as \n    \n    has_incidents\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    merged_ticket_ids\n    \n as \n    \n    merged_ticket_ids\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    problem_id\n    \n as \n    \n    problem_id\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    requester_id\n    \n as \n    \n    requester_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    submitter_id\n    \n as \n    \n    submitter_id\n    \n, \n    cast(null as integer) as \n    \n    system_ccs\n    \n , \n    \n    \n    system_client\n    \n as \n    \n    system_client\n    \n, \n    cast(null as TEXT) as \n    \n    system_ip_address\n    \n , \n    cast(null as integer) as \n    \n    system_json_email_identifier\n    \n , \n    cast(null as float) as \n    \n    system_latitude\n    \n , \n    cast(null as TEXT) as \n    \n    system_location\n    \n , \n    cast(null as float) as \n    \n    system_longitude\n    \n , \n    cast(null as integer) as \n    \n    system_machine_generated\n    \n , \n    cast(null as integer) as \n    \n    system_message_id\n    \n , \n    cast(null as integer) as \n    \n    system_raw_email_identifier\n    \n , \n    \n    \n    ticket_form_id\n    \n as \n    \n    ticket_form_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    via_channel\n    \n as \n    \n    via_channel\n    \n, \n    \n    \n    via_source_from_address\n    \n as \n    \n    via_source_from_address\n    \n, \n    \n    \n    via_source_from_id\n    \n as \n    \n    via_source_from_id\n    \n, \n    \n    \n    via_source_from_title\n    \n as \n    \n    via_source_from_title\n    \n, \n    \n    \n    via_source_rel\n    \n as \n    \n    via_source_rel\n    \n, \n    \n    \n    via_source_to_address\n    \n as \n    \n    via_source_to_address\n    \n, \n    \n    \n    via_source_to_name\n    \n as \n    \n    via_source_to_name\n    \n\n\n\n\n        --The below script allows for pass through columns.\n        \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_id,\n        _fivetran_synced,\n        assignee_id,\n        brand_id,\n        created_at,\n            updated_at,\n        \n        description,\n        due_at,\n        group_id,\n        external_id,\n        is_public,\n        organization_id,\n        priority,\n        recipient,\n        requester_id,\n        status,\n        subject,\n        problem_id,\n        submitter_id,\n        ticket_form_id,\n        type,\n        url,\n        via_channel as created_channel,\n        via_source_from_id as source_from_id,\n        via_source_from_title as source_from_title,\n        via_source_rel as source_rel,\n        via_source_to_address as source_to_address,\n        via_source_to_name as source_to_name\n\n        --The below script allows for pass through columns.\n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.278583Z", "completed_at": "2023-11-03T00:39:11.020219Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.021486Z", "completed_at": "2023-11-03T00:39:11.021489Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8264927864074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__brand", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__brand_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as TEXT) as \n    \n    brand_url\n    \n , \n    cast(null as boolean) as \n    \n    has_help_center\n    \n , \n    cast(null as TEXT) as \n    \n    help_center_state\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    logo_content_type\n    \n , \n    cast(null as TEXT) as \n    \n    logo_content_url\n    \n , \n    cast(null as boolean) as \n    \n    logo_deleted\n    \n , \n    cast(null as TEXT) as \n    \n    logo_file_name\n    \n , \n    cast(null as integer) as \n    \n    logo_height\n    \n , \n    cast(null as integer) as \n    \n    logo_id\n    \n , \n    cast(null as boolean) as \n    \n    logo_inline\n    \n , \n    cast(null as TEXT) as \n    \n    logo_mapped_content_url\n    \n , \n    cast(null as integer) as \n    \n    logo_size\n    \n , \n    cast(null as TEXT) as \n    \n    logo_url\n    \n , \n    cast(null as integer) as \n    \n    logo_width\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as TEXT) as \n    \n    subdomain\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as brand_id,\n        brand_url,\n        name,\n        subdomain,\n        active as is_active\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__brand\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.286197Z", "completed_at": "2023-11-03T00:39:11.126813Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.127926Z", "completed_at": "2023-11-03T00:39:11.127934Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9276180267333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__group", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__group_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as group_id,\n        name\n    from fields\n    \n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.214829Z", "completed_at": "2023-11-03T00:39:11.219288Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.219878Z", "completed_at": "2023-11-03T00:39:11.219884Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006354093551635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__time_zone_time_zone.b25b3452b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_zone\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__time_zone\"\nwhere time_zone is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.221596Z", "completed_at": "2023-11-03T00:39:11.224597Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.225220Z", "completed_at": "2023-11-03T00:39:11.225225Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0046100616455078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__time_zone_time_zone.67995adbaf", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    time_zone as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__time_zone\"\nwhere time_zone is not null\ngroup by time_zone\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.226878Z", "completed_at": "2023-11-03T00:39:11.229635Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.230084Z", "completed_at": "2023-11-03T00:39:11.230089Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004214048385620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket\"\nwhere ticket_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.231684Z", "completed_at": "2023-11-03T00:39:11.234218Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.234651Z", "completed_at": "2023-11-03T00:39:11.234655Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00400090217590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__ticket_ticket_id.4be7124521", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ticket_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__ticket\"\nwhere ticket_id is not null\ngroup by ticket_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.236041Z", "completed_at": "2023-11-03T00:39:11.239130Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.239655Z", "completed_at": "2023-11-03T00:39:11.239661Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0045659542083740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect brand_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__brand\"\nwhere brand_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:10.401711Z", "completed_at": "2023-11-03T00:39:11.195806Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.196537Z", "completed_at": "2023-11-03T00:39:11.196543Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9221911430358887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization_tag", "compiled": true, "compiled_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization_tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    organization_id\n    \n , \n    cast(null as TEXT) as \n    \n    tag\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        \n        tag\n        \n        as tags\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__organization_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.241458Z", "completed_at": "2023-11-03T00:39:11.323995Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.325403Z", "completed_at": "2023-11-03T00:39:11.325408Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08896780014038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__brand_brand_id.fdf8e23c9e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    brand_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__brand\"\nwhere brand_id is not null\ngroup by brand_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.325717Z", "completed_at": "2023-11-03T00:39:11.331513Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.335551Z", "completed_at": "2023-11-03T00:39:11.335558Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011885643005371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect group_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__group\"\nwhere group_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.331860Z", "completed_at": "2023-11-03T00:39:11.336711Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.337296Z", "completed_at": "2023-11-03T00:39:11.337299Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00698089599609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__group_group_id.f0658dabcd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    group_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__group\"\nwhere group_id is not null\ngroup by group_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.108445Z", "completed_at": "2023-11-03T00:39:11.830827Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.832426Z", "completed_at": "2023-11-03T00:39:11.832443Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8018200397491455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user_tag", "compiled": true, "compiled_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user_tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    user_id\n    \n , \n    cast(null as TEXT) as \n    \n    tag\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        user_id,\n        \n        tag\n        \n        as tags\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.119712Z", "completed_at": "2023-11-03T00:39:11.894300Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.895066Z", "completed_at": "2023-11-03T00:39:11.895073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8725929260253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as TEXT) as \n    \n    alias\n    \n , \n    cast(null as integer) as \n    \n    authenticity_token\n    \n , \n    cast(null as boolean) as \n    \n    chat_only\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    details\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as integer) as \n    \n    external_id\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as timestamp) as \n    \n    last_login_at\n    \n , \n    cast(null as TEXT) as \n    \n    locale\n    \n , \n    cast(null as integer) as \n    \n    locale_id\n    \n , \n    cast(null as boolean) as \n    \n    moderator\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as integer) as \n    \n    notes\n    \n , \n    cast(null as boolean) as \n    \n    only_private_comments\n    \n , \n    cast(null as integer) as \n    \n    organization_id\n    \n , \n    cast(null as integer) as \n    \n    phone\n    \n , \n    cast(null as integer) as \n    \n    remote_photo_url\n    \n , \n    cast(null as boolean) as \n    \n    restricted_agent\n    \n , \n    cast(null as TEXT) as \n    \n    role\n    \n , \n    cast(null as boolean) as \n    \n    shared\n    \n , \n    cast(null as boolean) as \n    \n    shared_agent\n    \n , \n    cast(null as integer) as \n    \n    signature\n    \n , \n    cast(null as boolean) as \n    \n    suspended\n    \n , \n    cast(null as TEXT) as \n    \n    ticket_restriction\n    \n , \n    cast(null as TEXT) as \n    \n    time_zone\n    \n , \n    cast(null as boolean) as \n    \n    two_factor_auth_enabled\n    \n , \n    cast(null as TEXT) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    url\n    \n , \n    cast(null as boolean) as \n    \n    verified\n    \n \n\n\n        \n    from base\n),\n\nfinal as ( \n    \n    select \n        id as user_id,\n        external_id,\n        _fivetran_synced,\n        last_login_at,\n            created_at,\n            updated_at,\n        \n        email,\n        name,\n        organization_id,\n        role,\n        ticket_restriction,\n        time_zone,\n        locale,\n        active as is_active,\n        suspended as is_suspended\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.990033Z", "completed_at": "2023-11-03T00:39:11.997274Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.999065Z", "completed_at": "2023-11-03T00:39:11.999095Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012070178985595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-03T00:39:11.993835Z", "completed_at": "2023-11-03T00:39:11.997886Z"}, {"name": "execute", "started_at": "2023-11-03T00:39:11.999514Z", "completed_at": "2023-11-03T00:39:11.999518Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012618780136108398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__user_user_id.3d3e346b11", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zendesk_source_integrations_tests_2_zendesk_source\".\"stg_zendesk__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 10.657262086868286, "args": {"vars": {}, "log_level": "info", "log_format": "default", "printer_width": 80, "quiet": false, "which": "generate", "use_colors": true, "empty_catalog": false, "favor_state": false, "show_resource_report": false, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/zendesk/dbt_zendesk_source/integration_tests", "compile": true, "indirect_selection": "eager", "cache_selected_only": false, "static_parser": true, "select": [], "use_colors_file": true, "introspect": true, "invocation_command": "dbt docs generate -t postgres", "partial_parse": true, "print": true, "log_level_file": "debug", "version_check": true, "log_file_max_bytes": 10485760, "static": false, "write_json": true, "exclude": [], "enable_legacy_logger": false, "warn_error_options": {"include": [], "exclude": []}, "defer": false, "strict_mode": false, "partial_parse_file_diff": true, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/zendesk/dbt_zendesk_source/integration_tests/logs", "populate_cache": true, "log_format_file": "debug", "macro_debugging": false, "profiles_dir": "/Users/avinash.kunnath/.dbt", "send_anonymous_usage_stats": true, "target": "postgres"}}